# ====================================================================
# MCP LangGraph Demo - Development Environment Configuration Template
# ====================================================================
# This is an example environment file for the MCP (Model Context Protocol) 
# LangGraph demonstration platform development setup.
#
# SETUP INSTRUCTIONS:
# 1. Copy this file to `.env.dev` in the same directory
# 2. Replace all placeholder values with your actual configuration
# 3. Obtain required API keys from the specified providers
# 4. Never commit the actual .env.dev file to version control
# ====================================================================

# ============================================
# INTERNAL SERVICE CONFIGURATION
# ============================================
# Internal API key used for service-to-service authentication
# This key ensures secure communication between microservices
# SECURITY: Use a strong, randomly generated key in production
# Example: Generate with: openssl rand -hex 32
INTERNAL_API_KEY=your_internal_api_key_here

# ============================================
# SERVICE URLS - DOCKER NETWORK
# ============================================
# These URLs are used for internal service communication within Docker network
# Format: http://service-name:port (service names defined in docker-compose.yml)
# 
# NOTE: These should typically remain as-is for Docker Compose deployment
# Only modify if you change service names in docker-compose.yml

# API Gateway - Main entry point for external requests
API_GATEWAY_URL=http://api-gateway:8000

# LangGraph Agent - AI orchestration and tool execution service  
LANGGRAPH_AGENT_URL=http://langgraph-agent:8001

# Backend URL - Used by UI to communicate with API Gateway
BACKEND_URL=http://api-gateway:8000

# ============================================
# EXTERNAL API KEYS
# ============================================
# Third-party service API keys for external integrations
# Obtain these keys from respective service providers

# Groq API Key - For LLM inference and chat completions
# REQUIRED: Get your key from: https://console.groq.com/keys
# Sign up for free tier: https://console.groq.com/
# Example: gsk_abcd1234efgh5678ijkl9012mnop3456qrst7890uvwx1234yz567890ab
GROQ_API_KEY=your_groq_api_key_here

# OpenWeather API Key - For weather data retrieval
# REQUIRED: Get your key from: https://openweathermap.org/api
# Sign up for free tier: https://home.openweathermap.org/users/sign_up
# Example: a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
WEATHER_API_KEY=your_openweather_api_key_here

# ============================================
# MCP TOOL CONFIGURATION
# ============================================
# JSON configuration for Model Context Protocol (MCP) tool integrations
# Each tool specifies its URL and transport method for communication
# 
# Structure: {"tool_name": {"url": "service_url", "transport": "transport_type"}}
# Available transports: "streamable_http", "stdio", "sse"
#
# CURRENT TOOLS:
# - weather: Weather data retrieval service
# 
# TO ADD NEW TOOLS:
# Add entries in format: "tool_name":{"url":"http://service:port/mcp","transport":"streamable_http"}
MCP_TOOL_CONFIG={"weather":{"url":"http://weather-server:8002/mcp","transport":"streamable_http"}}

# ============================================
# LOGGING CONFIGURATION
# ============================================
# Log level for all services
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Recommended: INFO for development, WARNING for production
LOG_LEVEL=INFO

# ============================================
# DEVELOPMENT SETTINGS
# ============================================
# Environment identifier
# Options: dev, staging, prod
ENV=dev

# Enable debug mode for development
# Set to false in production for security
DEBUG=true

# CORS origins for development (allows all origins in dev environment)
# In production, specify exact origins: https://yourdomain.com,https://app.yourdomain.com
CORS_ORIGINS=*

# ============================================
# OPTIONAL CONFIGURATION - Not Implemented
# ============================================
# The following variables are optional and have sensible defaults

# Database Configuration (if implementing persistence)
# DATABASE_URL=postgresql://user:password@localhost:5432/mcp_demo

# Redis Configuration (if implementing caching)
# REDIS_URL=redis://localhost:6379/0

# JWT Configuration (if implementing user authentication)
# JWT_SECRET_KEY=your_jwt_secret_here
# JWT_ALGORITHM=HS256
# JWT_EXPIRATION_HOURS=24

# Rate Limiting (requests per minute per IP)
# RATE_LIMIT_PER_MINUTE=60

# Model Configuration
# DEFAULT_MODEL=llama3-8b-8192
# MAX_TOKENS=4096
# TEMPERATURE=0.7

# ============================================
# LOCAL DEVELOPMENT OVERRIDES
# ============================================
# Uncomment and modify these if running services individually (not in Docker)

# For local development without Docker:
# API_GATEWAY_URL=http://localhost:8000
# LANGGRAPH_AGENT_URL=http://localhost:8001
# BACKEND_URL=http://localhost:8000

# ============================================
# SETUP CHECKLIST
# ============================================
# Before starting development, ensure:
# □ Copied this file to .env.dev
# □ Obtained Groq API key from console.groq.com
# □ Obtained OpenWeather API key from openweathermap.org
# □ Generated strong INTERNAL_API_KEY
# □ Verified all placeholder values are replaced
# □ Added .env.dev to .gitignore (already included)
# □ Never commit .env.dev to version control

# ============================================
# TROUBLESHOOTING
# ============================================
# Common issues and solutions:
#
# 1. "Invalid API key" errors:
#    - Verify your API keys are correct and active
#    - Check if you've hit rate limits
#
# 2. Service connection errors:
#    - Ensure all services are running
#    - Check Docker network connectivity
#    - Verify port mappings in docker-compose.yml
#
# 3. Permission errors:
#    - Check INTERNAL_API_KEY matches across services
#    - Verify CORS_ORIGINS configuration
#
# 4. MCP tool errors:
#    - Validate MCP_TOOL_CONFIG JSON syntax
#    - Ensure MCP servers are accessible
#
# For more help, see: README.md or GitHub Issues
